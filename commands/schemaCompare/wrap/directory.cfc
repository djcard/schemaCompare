/***
 * This is used to wrap existing SQL files (such as one generated by the SQL server and exported) in a folder into a migration using queryExecute.
 *
 * @path The directory containing all the SQL scripts
 * @outputPath The directory into which to save all of the migrations. Defaults to the resources/database/migrations under the current directory in order to comply with where cfmigrations looks by default.
 *
 * */

component {

    property name="support" inject="support@schemaCompare";

    function run(required string path ="", string outputPath = getcwd() & 'resources/database/migrations') {
        var files = [];
        print.line(expandpath(path));
        if (path.len() and directoryExists(expandpath(path))) {
            files = directoryList(expandpath(path))
        }
        print.line(files);
        files.each((item) => {
            var rawText = '';
            var rawText = '';
            var name = '';
            if (fileExists(item)) {
                name = item.listlast('/\');
                rawText = fileRead(item);
            }
            var queryArr = rawText
                .listToArray('GO', false, true)
                .filter((item) => {
                    return !item.findNoCase('USE [');
                });
            if (queryArr.len()) {
                var queryText = support.wrapData(queryArr);
                //if(!queryText.left(2)=="//"){
                    support.writeMigration(name, queryText, outputPath);
                //}
            }
        })
    }

}
